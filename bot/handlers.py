"""Command handlers for yoga bot."""

import asyncio
import logging
from typing import List, Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)

from .storage import JsonStorage, User, Feedback
from .scheduler import YogaScheduler
from .utils import (
    PrinciplesManager, 
    is_valid_timezone, 
    is_valid_time_format, 
    validate_skip_days,
    format_principle_message
)


logger = logging.getLogger(__name__)


# Multilingual texts
TEXTS = {
    "en": {
        "welcome": (
            "üïäÔ∏è **Welcome to Yoga Principles Bot!**\n\n"
            "üéØ **What I do:**\n"
            "Every day I send you one of the 10 fundamental yoga principles (yamas and niyamas) "
            "at your preferred time with full description and practical tips.\n\n"
            "üåü **Who will find this useful:**\n"
            "‚Ä¢ Yoga practitioners of any level\n"
            "‚Ä¢ Those who want to develop mindfulness\n"
            "‚Ä¢ People striving for spiritual growth\n"
            "‚Ä¢ Anyone interested in yoga philosophy\n\n"
            "üîÑ **How it works:**\n"
            "‚Ä¢ Principles are chosen randomly for each user\n"
            "‚Ä¢ Repetitions are possible ‚Äî this is normal and helpful!\n"
            "‚Ä¢ Each principle is a daily lesson\n"
            "‚Ä¢ You can skip certain days of the week\n\n"
            "Let's start with choosing your preferred language:"
        ),
        "language_chosen": "‚úÖ Language set to English!",
        "timezone_step": (
            "üìç **Step 1/3: Time Zone**\n"
            "Please specify your time zone in IANA format:\n\n"
            "Popular options:\n"
            "‚Ä¢ `Europe/Moscow` - Moscow\n"
            "‚Ä¢ `Asia/Tashkent` - Tashkent\n"
            "‚Ä¢ `Europe/Kiev` - Kiev\n"
            "‚Ä¢ `Asia/Almaty` - Almaty\n"
            "‚Ä¢ `UTC` - UTC time"
        ),
        "timezone_saved": "‚úÖ Time zone saved!",
        "time_step": (
            "‚è∞ **Step 2/3: Send Time**\n"
            "Please specify time in HH:MM format (e.g., 08:00, 20:30)\n\n"
            "Morning time is recommended for better perception of principles."
        ),
        "time_saved": "‚úÖ Send time saved!",
        "skip_days_step": (
            "üìÖ **Step 3/3: Days to Skip (optional)**\n"
            "Specify weekdays when you DON'T want to receive messages.\n\n"
            "Format: day numbers separated by commas (0=Mon, 1=Tue, 2=Wed, 3=Thu, 4=Fri, 5=Sat, 6=Sun)\n"
            "Examples:\n"
            "‚Ä¢ `5,6` - skip weekends\n"
            "‚Ä¢ `0,2,4` - skip Mon, Wed, Fri\n"
            "‚Ä¢ `-` or just Enter - don't skip days"
        ),
        "setup_complete": (
            "üéâ **Setup Complete!**\n\n"
            "üìã **Your Settings:**\n"
            "üïê Time: {time}\n"
            "üåç Time Zone: {timezone}\n"
            "üìÖ Skip Days: {skip_days}\n\n"
            "‚ú® Your first yoga principle will be sent at the next scheduled time!\n\n"
            "Use /test to get a test message."
        ),
        "already_subscribed": (
            "üßò You're already subscribed to daily yoga principles!\n\n"
            "Use /settings to change settings or /stop to unsubscribe."
        ),
        "unsubscribed": (
            "üòî You have unsubscribed from yoga principles newsletter.\n\n"
            "Use /start to subscribe again."
        ),
        "not_subscribed": "You were not subscribed to the newsletter.",
        "current_settings": (
            "‚öôÔ∏è **Your Current Settings:**\n\n"
            "üåê Language: {user_language}\n"
            "üïê Send Time: `{time}`\n"
            "üåç Time Zone: `{timezone}`\n"
            "üìÖ Skip Days: {skip_days}\n\n"
            "To change settings, use /start for new setup."
        ),
        "not_subscribed_test": "You're not subscribed to the newsletter. Use /start to subscribe.",
        "test_failed": "Failed to send test message.",
        "invalid_timezone": "‚ùå Invalid time zone format. Please try again.\n\nExamples: Europe/Moscow, Asia/Tashkent, UTC",
        "invalid_time": "‚ùå Invalid time format. Use HH:MM format (e.g., 08:00)",
        "invalid_skip_days": "‚ùå Invalid days format. Use numbers from 0 to 6 separated by commas.",
        "setup_error": "‚ùå Error saving settings. Please try again.",
        "error": "An error occurred. Please try again.",
        "choose_language": "Please choose your language:",
        "english": "üá∫üá∏ English",
        "russian": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "menu": "üìã **Main Menu**",
        "menu_settings": "‚öôÔ∏è Settings",
        "menu_test": "üß™ Test Message",
        "menu_about": "‚ÑπÔ∏è About Bot",
        "menu_feedback": "üíå Feedback & Ideas",
        "menu_stop": "‚ùå Unsubscribe",
        "settings_menu": "‚öôÔ∏è **Settings Menu**\n\nWhat would you like to change?",
        "change_language": "üåê Change Language",
        "change_time": "‚è∞ Change Send Time",
        "change_timezone": "üåç Change Time Zone",
        "change_skip_days": "üìÖ Change Skip Days",
        "back_to_menu": "üîô Back to Menu",
        "skip_days_improved": (
            "üìÖ **Days to Skip (optional)**\n\n"
            "You can:\n"
            "‚Ä¢ Enter day numbers: `5,6` (skip weekends)\n"
            "‚Ä¢ Enter day numbers: `0,2,4` (skip Mon, Wed, Fri)\n"
            "‚Ä¢ Type anything else to not skip any days\n\n"
            "Examples: 'no skip', 'don't skip', '-', or just press Enter"
        ),
        "no_skip_days": "‚úÖ No days will be skipped",
        "about_text": (
            "üïäÔ∏è **Yama/Niyama Training Bot**\n\n"
            "This bot helps you practice yoga principles (Yama and Niyama) daily. "
            "Each day you receive one principle that becomes your focus of attention for the entire day.\n\n"
            "üåü **Features:**\n"
            "‚Ä¢ Principles are chosen randomly - everyone has their own path!\n"
            "‚Ä¢ Repetitions help better understand the principles\n"
            "‚Ä¢ Practice the principle throughout the day\n"
            "‚Ä¢ Develop mindfulness in everyday life\n\n"
            "‚öôÔ∏è **Capabilities:**\n"
            "üîπ **Random selection** of principle for each user\n"
            "üîπ **Two languages:** English and Russian\n"
            "üîπ **Flexible settings** for receiving time\n"
            "üîπ **Skip days** when you need to rest\n\n"
            "Created with ‚ù§Ô∏è for your spiritual growth. Let's change for the better together!"
        ),
        "feedback_prompt": (
            "üíå **Share Your Feedback & Ideas**\n\n"
            "Your opinion and suggestions matter! Please share:\n"
            "‚Ä¢ How do you like the bot?\n"
            "‚Ä¢ What features would you like to see?\n"
            "‚Ä¢ Any suggestions for improvement?\n"
            "‚Ä¢ Issues you've encountered\n"
            "‚Ä¢ Ideas for new principles or content\n\n"
            "Just write your message below:"
        ),
        "feedback_sent": "‚úÖ Thank you for your feedback! Your message has been sent to the developers.",
        "feedback_too_long": "‚ùå Message too long. Please keep it under 1000 characters.",
        "feedback_rate_limit": "‚è∞ Please wait before sending another feedback. You can send feedback once every 10 minutes.",
        "feedback_error": "‚ùå Error saving your feedback. Please try again later."
    },
    "ru": {
        "welcome": (
            "üïäÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –π–æ–≥–∏!**\n\n"
            "üéØ **–ß—Ç–æ —è –¥–µ–ª–∞—é:**\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–º –æ–¥–∏–Ω –∏–∑ 10 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –π–æ–≥–∏ (—è–º—ã –∏ –Ω–∏—è–º—ã) "
            "–≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.\n\n"
            "üåü **–î–ª—è –∫–æ–≥–æ —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ:**\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–º –π–æ–≥—É –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è\n"
            "‚Ä¢ –¢–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –õ—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –†–∞–∑–≤–∏—Ç–∏—é\n"
            "‚Ä¢ –í—Å–µ–º, –∫—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –π–æ–≥–∏\n\n"
            "üîÑ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
            "‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ - —É–∫–∞–∂–¥–æ–≥–æ —Å–≤–æ—è —Å—É–¥—å–±–∞!\n"
            "‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–Ω—Ü–∏–ø ‚Äî —ç—Ç–æ —É—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å, –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —ç—Ç–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –¥–Ω—è, –≤–æ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –∂–∏–∑–Ω–∏\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏\n\n"
            "–ù–∞—á–Ω—ë–º —Å –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞:"
        ),
        "language_chosen": "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π!",
        "timezone_step": (
            "üìç **–®–∞–≥ 1/3: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA:\n\n"
            "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
            "‚Ä¢ `Europe/Moscow` - –ú–æ—Å–∫–≤–∞\n"
            "‚Ä¢ `Asia/Tashkent` - –¢–∞—à–∫–µ–Ω—Ç\n"
            "‚Ä¢ `Europe/Kiev` - –ö–∏–µ–≤\n"
            "‚Ä¢ `Asia/Almaty` - –ê–ª–º–∞—Ç—ã\n"
            "‚Ä¢ `UTC` - UTC –≤—Ä–µ–º—è"
        ),
        "timezone_saved": "‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        "time_step": (
            "‚è∞ **–®–∞–≥ 2/3: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏**\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00, 20:30)\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤."
        ),
        "time_saved": "‚úÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        "skip_days_step": (
            "üìÖ **–®–∞–≥ 3/3: –î–Ω–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)**\n"
            "–£–∫–∞–∂–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–§–æ—Ä–º–∞—Ç: –Ω–æ–º–µ—Ä–∞ –¥–Ω–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (0=–ü–Ω, 1=–í—Ç, 2=–°—Ä, 3=–ß—Ç, 4=–ü—Ç, 5=–°–±, 6=–í—Å)\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `5,6` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ\n"
            "‚Ä¢ `0,2,4` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–Ω, —Å—Ä, –ø—Ç\n"
            "‚Ä¢ `-` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ Enter - –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥–Ω–∏"
        ),
        "setup_complete": (
            "üéâ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            "üìã **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            "üïê –í—Ä–µ–º—è: {time}\n"
            "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
            "üìÖ –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å: {skip_days}\n\n"
            "‚ú® –ü–µ—Ä–≤—ã–π –ø—Ä–∏–Ω—Ü–∏–ø –π–æ–≥–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        ),
        "already_subscribed": (
            "üßò –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –π–æ–≥–∏!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ /stop –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏."
        ),
        "unsubscribed": (
            "üòî –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –π–æ–≥–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
        ),
        "not_subscribed": "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.",
        "current_settings": (
            "‚öôÔ∏è **–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
            "üåê –Ø–∑—ã–∫: {user_language}\n"
            "üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: `{time}`\n"
            "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{timezone}`\n"
            "üìÖ –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥–Ω–∏: {skip_days}\n\n"
            "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        ),
        "not_subscribed_test": "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.",
        "test_failed": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        "invalid_timezone": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ü—Ä–∏–º–µ—Ä—ã: Europe/Moscow, Asia/Tashkent, UTC",
        "invalid_time": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00)",
        "invalid_skip_days": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 6 —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
        "setup_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        "choose_language": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:",
        "english": "üá∫üá∏ English",
        "russian": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "menu": "üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**",
        "menu_settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "menu_test": "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "menu_about": "‚ÑπÔ∏è –û –±–æ—Ç–µ",
        "menu_feedback": "üíå –û—Ç–∑—ã–≤—ã –∏ –∏–¥–µ–∏",
        "menu_stop": "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
        "settings_menu": "‚öôÔ∏è **–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫**\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        "change_language": "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "change_time": "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
        "change_timezone": "üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
        "change_skip_days": "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏ –ø—Ä–æ–ø—É—Å–∫–∞",
        "back_to_menu": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        "skip_days_improved": (
            "üìÖ **–î–Ω–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)**\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –¥–Ω–µ–π: `5,6` (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ)\n"
            "‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –¥–Ω–µ–π: `0,2,4` (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–Ω, —Å—Ä, –ø—Ç)\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –¥—Ä—É–≥–æ–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥–Ω–∏\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: '–Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å', '–Ω–µ—Ç', '-', –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter"
        ),
        "no_skip_days": "‚úÖ –î–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è",
        "about_text": (
            "üïäÔ∏è **–ë–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ø–º—ã/–ù–∏—è–º—ã**\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –π–æ–≥–∏ (–Ø–º–∞ –∏ –ù–∏—è–º–∞). "
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–¥–∏–Ω –ø—Ä–∏–Ω—Ü–∏–ø, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à–∏–º —Ñ–æ–∫—É—Å–æ–º –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å.\n\n"
            "üåü **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ - —É –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ—è —Å—É–¥—å–±–∞!\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –ø–æ–º–æ–≥–∞—é—Ç –ª—É—á—à–µ –∏—Ö —É—Å–≤–æ–∏—Ç—å\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–µ–º –ø—Ä–∏–Ω—Ü–∏–ø –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –¥–Ω—è\n"
            "‚Ä¢ –†–∞–∑–≤–∏–≤–∞–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏\n\n"
            "‚öôÔ∏è **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "üîπ **–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä** –ø—Ä–∏–Ω—Ü–∏–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ\n"
            "üîπ **–î–≤–∞ —è–∑—ã–∫–∞:** —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
            "üîπ **–ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è\n"
            "üîπ **–ü—Ä–æ–ø—É—Å–∫ –¥–Ω–µ–π** –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å\n\n"
            "–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –≤–∞—à–µ–≥–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. –î–∞–≤–∞–π—Ç–µ –º–µ–Ω—è—Ç—å—Å—è –∫ –ª—É—á—à–µ–º—É –≤–º–µ—Å—Ç–µ!"
        ),
        "feedback_prompt": (
            "üíå **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ—Ç–∑—ã–≤–æ–º –∏ –∏–¥–µ—è–º–∏**\n\n"
            "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å:\n"
            "‚Ä¢ –ö–∞–∫ –≤–∞–º –±–æ—Ç?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å?\n"
            "‚Ä¢ –ï—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é?\n"
            "‚Ä¢ –ù–∞—à–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã?\n"
            "‚Ä¢ –ò–¥–µ–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:"
        ),
        "feedback_sent": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.",
        "feedback_too_long": "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.",
        "feedback_rate_limit": "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥—Ä—É–≥–æ–≥–æ –æ—Ç–∑—ã–≤–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ–¥–∏–Ω —Ä–∞–∑ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.",
        "feedback_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    }
}

# Admin texts (always in English)
ADMIN_TEXTS = {
    "next_principle": "üìã **Random principle for user {user_id}:**\n\n{principle}\n\nüí° *Principles are chosen randomly for each user*",
    "no_principles": "No available principles for user {user_id}.",
    "add_usage": "Usage: /add <principle text>",
    "add_empty": "Principle text cannot be empty.",
    "add_success": "‚úÖ Principle '{name}' successfully added!",
    "add_error": "‚ùå Error adding principle.",
    "stats": (
        "üìä **Bot Statistics:**\n\n"
        "üë• Total users: {total_users}\n"
        "‚úÖ Active: {active_users}\n"
        "üì® Messages sent: {total_messages_sent}\n\n"
        "‚è∞ **Scheduler:**\n"
        "üîÑ Scheduled jobs: {total_jobs}\n"
        "üéØ Jobs created: {jobs_created}\n"
        "üöÄ Status: {status}"
    ),
    "broadcast_usage": "Usage: /broadcast <message>",
    "broadcast_empty": "Message text cannot be empty.",
    "broadcast_start": "üì¢ Starting broadcast to {count} users...",
    "broadcast_result": (
        "üì¢ **Broadcast Results:**\n\n"
        "‚úÖ Sent: {sent}\n"
        "‚ùå Errors: {failed}\n"
        "üë• Total: {total}"
    ),
    "feedback_stats": (
        "üíå **Feedback Statistics:**\n\n"
        "üìù Total feedback: {total_feedback}\n"
        "üìè Average length: {average_length} chars\n"
        "üíæ File size: {file_size_mb} MB\n\n"
        "üåê **By Language:**\n{by_language}\n\n"
        "Use /feedback_list to see recent feedback"
    ),
    "feedback_list_header": "üíå **Recent Feedback ({count} items):**\n\n",
    "feedback_item": (
        "**#{id}** | {timestamp}\n"
        "üë§ User: {chat_id} (@{username})\n"
        "üåê Lang: {language} | üìè {length} chars\n"
        "üí¨ {message}\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    ),
    "no_feedback": "No feedback received yet.",
    "feedback_list_usage": "Usage: /feedback_list [limit] (default: 10, max: 50)",
    "admin_help": (
        "üîß **Admin Commands:**\n\n"
        "üìä **Statistics:**\n"
        "‚Ä¢ `stats` - Bot usage statistics\n"
        "‚Ä¢ `feedback_stats` - Feedback statistics\n"
        "‚Ä¢ `feedback_list [limit]` - View recent feedback\n\n"
        "üì® **Messages:**\n"
        "‚Ä¢ `next` - Show random principle for user\n"
        "‚Ä¢ `broadcast <message>` - Send message to all users\n\n"
        "üõ†Ô∏è **Management:**\n"
        "‚Ä¢ `add <text>` - Add new principle (not implemented)\n\n"
        "All commands are admin-only and require proper permissions."
    )
}


class BotHandlers:
    """Handlers for bot commands."""
    
    def __init__(
        self, 
        application: Application, 
        storage: JsonStorage, 
        scheduler: YogaScheduler,
        principles_manager: PrinciplesManager,
        admin_ids: List[int]
    ):
        self.application = application
        self.storage = storage
        self.scheduler = scheduler
        self.principles_manager = principles_manager
        self.admin_ids = admin_ids
        self.user_states = {}  # Track user registration states.
        
        # Register handlers.
        self._register_handlers()
    
    def _register_handlers(self) -> None:
        """Register all event handlers."""
        
        # User commands.
        self.application.add_handler(CommandHandler("start", self._handle_start))
        self.application.add_handler(CommandHandler("stop", self._handle_stop))
        self.application.add_handler(CommandHandler("settings", self._handle_settings))
        self.application.add_handler(CommandHandler("test", self._handle_test))
        self.application.add_handler(CommandHandler("menu", self._handle_menu))
        
        # Admin commands.
        self.application.add_handler(CommandHandler("next", self._handle_next))
        self.application.add_handler(CommandHandler("add", self._handle_add_principle))
        self.application.add_handler(CommandHandler("stats", self._handle_stats))
        self.application.add_handler(CommandHandler("broadcast", self._handle_broadcast))
        self.application.add_handler(CommandHandler("feedback_stats", self._handle_feedback_stats))
        self.application.add_handler(CommandHandler("feedback_list", self._handle_feedback_list))
        self.application.add_handler(CommandHandler("admin", self._handle_admin))
        
        # Callback query handlers.
        self.application.add_handler(CallbackQueryHandler(self._handle_language_callback, pattern="^lang_"))
        self.application.add_handler(CallbackQueryHandler(self._handle_menu_callback, pattern="^menu_"))
        self.application.add_handler(CallbackQueryHandler(self._handle_settings_callback, pattern="^settings_"))
        self.application.add_handler(CallbackQueryHandler(self._handle_change_callback, pattern="^change_"))
        
        # General message handler for registration flow.
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
    
    def _get_text(self, key: str, language: str = "en", **kwargs) -> str:
        """Get localized text."""
        return TEXTS.get(language, TEXTS["en"]).get(key, key).format(**kwargs)
    
    def _get_admin_text(self, key: str, **kwargs) -> str:
        """Get admin text."""
        return ADMIN_TEXTS.get(key, key).format(**kwargs)
    
    async def _handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /start command."""
        chat_id = update.effective_chat.id
        
        try:
            # Check if user already exists.
            user = await self.storage.get_user(chat_id)
            if user and user.is_active:
                text = self._get_text("already_subscribed", user.language)
                await update.message.reply_text(text, parse_mode='Markdown')
                return
            
            # Start with language selection.
            keyboard = [
                [
                    InlineKeyboardButton(TEXTS["en"]["english"], callback_data="lang_en"),
                    InlineKeyboardButton(TEXTS["en"]["russian"], callback_data="lang_ru")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Show welcome message in both languages.
            welcome_en = TEXTS["en"]["welcome"] + "\n\n" + TEXTS["en"]["choose_language"]
            welcome_ru = "\n\n" + TEXTS["ru"]["welcome"] + "\n\n" + TEXTS["ru"]["choose_language"]
            
            combined_welcome = welcome_en + welcome_ru
            
            message = await update.message.reply_text(combined_welcome, reply_markup=reply_markup, parse_mode='Markdown')
            await self.storage.add_bot_message(chat_id, message.message_id, "welcome")
            
        except Exception as e:
            logger.error(f"Error in start handler for user {chat_id}: {e}")
            # Try to get user language for error message
            try:
                user = await self.storage.get_user(chat_id)
                error_lang = user.language if user else "en"
            except:
                error_lang = "en"
            await update.message.reply_text(self._get_text("error", language=error_lang))
    
    async def _handle_language_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle language selection callback."""
        query = update.callback_query
        chat_id = query.message.chat.id
        language = query.data.split("_")[1]  # Extract language from callback data.
        
        try:
            await query.answer()
            
            # Check if user already exists (changing language) or new registration
            user = await self.storage.get_user(chat_id)
            
            if user and user.is_active:
                # User exists - changing language
                user.language = language
                success = await self.storage.save_user(user)
                
                if success:
                    confirmation = self._get_text("language_chosen", language)
                    text = f"{confirmation}\n\n{self._get_text('menu', language)}"
                    keyboard = self._create_main_menu_keyboard(language)
                    message = await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
                    if message:
                        await self.storage.add_bot_message(chat_id, message.message_id, "menu")
                else:
                    await query.edit_message_text(self._get_text("setup_error", language))
            else:
                # New user registration
                self.user_states[chat_id] = {
                    "step": "timezone",
                    "language": language,
                    "registration_message_id": query.message.message_id  # Save message ID for editing
                }
                
                # Send language confirmation and timezone step.
                confirmation = self._get_text("language_chosen", language)
                timezone_msg = self._get_text("timezone_step", language)
                
                combined_msg = f"{confirmation}\n\n{timezone_msg}"
                
                await query.edit_message_text(combined_msg, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in language callback for user {chat_id}: {e}")
            await query.edit_message_text(self._get_text("error", language))
    
    async def _handle_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /stop command."""
        chat_id = update.effective_chat.id
        
        try:
            # Delete user's /stop command message
            await self._delete_message_safe(chat_id, update.message.message_id)
            
            user = await self.storage.get_user(chat_id)
            language = user.language if user else "en"
            
            # Clear dialog - delete all bot messages except the last one we'll send
            await self._clear_user_dialog(chat_id)
            
            success = await self.storage.deactivate_user(chat_id)
            if success:
                text = self._get_text("unsubscribed", language)
                # Remove user from scheduler
                await self.scheduler.remove_user_jobs(chat_id)
            else:
                text = self._get_text("not_subscribed", language)
            
            # Send final message (don't store this message ID as it should remain in dialog)
            await update.message.reply_text(text, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"Error in stop handler for user {chat_id}: {e}")
            await update.message.reply_text("An error occurred while processing your request.")
    
    async def _handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /settings command."""
        chat_id = update.effective_chat.id
        
        try:
            user = await self.storage.get_user(chat_id)
            if not user or not user.is_active:
                await update.message.reply_text(self._get_text("not_subscribed_test", language="en"))
                return
            
            language_display = "English" if user.language == "en" else "–†—É—Å—Å–∫–∏–π"
            skip_days_display = self._format_skip_days(user.skip_day_id, user.language)
            
            text = self._get_text(
                "current_settings", 
                language=user.language,
                user_language=language_display,
                time=user.time_for_send,
                timezone=user.timezone,
                skip_days=skip_days_display
            )
            
            # Show settings menu instead of just text
            text += f"\n\n{self._get_text('settings_menu', language=user.language)}"
            keyboard = self._create_settings_menu_keyboard(user.language)
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in settings handler for user {chat_id}: {e}")
            # Try to get user language for error message
            try:
                user = await self.storage.get_user(chat_id)
                error_lang = user.language if user else "en"
            except:
                error_lang = "en"
            await update.message.reply_text(self._get_text("error", language=error_lang))
    
    async def _handle_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /test command."""
        chat_id = update.effective_chat.id
        
        try:
            user = await self.storage.get_user(chat_id)
            if not user or not user.is_active:
                lang = user.language if user else "en"
                await update.message.reply_text(self._get_text("not_subscribed_test", language=lang))
                return
            
            success = await self.scheduler.send_test_message(chat_id)
            if not success:
                text = self._get_text("test_failed", user.language)
                await update.message.reply_text(text)
                
        except Exception as e:
            logger.error(f"Error in test handler for user {chat_id}: {e}")
            # Try to get user language for error message
            try:
                user = await self.storage.get_user(chat_id)
                error_lang = user.language if user else "en"
            except:
                error_lang = "en"
            await update.message.reply_text(self._get_text("error", language=error_lang))
    
    # Admin handlers.
    async def _handle_next(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /next command (admin only)."""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.admin_ids:
            return
        
        try:
            args = context.args
            target_chat_id = int(args[0]) if args else chat_id
            
            principle = await self.scheduler.get_next_principle_for_user(target_chat_id)
            if principle:
                principle_text = format_principle_message(principle)
                message_text = self._get_admin_text("next_principle", user_id=target_chat_id, principle=principle_text)
                await update.message.reply_text(message_text, parse_mode='Markdown')
            else:
                text = self._get_admin_text("no_principles", user_id=target_chat_id)
                await update.message.reply_text(text)
                
        except Exception as e:
            logger.error(f"Error in next handler: {e}")
            await update.message.reply_text("Error getting next principle.")
    
    async def _handle_add_principle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /add command (admin only)."""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.admin_ids:
            return
        
        try:
            if not context.args:
                await update.message.reply_text(self._get_admin_text("add_usage"))
                return
            
            principle_text = " ".join(context.args)
            if not principle_text:
                await update.message.reply_text(self._get_admin_text("add_empty"))
                return
            
            # Simple parsing for new principle.
            lines = principle_text.split('\n')
            name = lines[0] if lines else "New Principle"
            description = '\n'.join(lines[1:]) if len(lines) > 1 else principle_text
            
            new_principle = {
                "name": name,
                "emoji": "üßò",
                "short_description": name,
                "description": description,
                "practice_tip": ""
            }
            
            success = await self.principles_manager.add_principle(new_principle)
            if success:
                text = self._get_admin_text("add_success", name=name)
            else:
                text = self._get_admin_text("add_error")
            
            await update.message.reply_text(text)
                
        except Exception as e:
            logger.error(f"Error in add principle handler: {e}")
            await update.message.reply_text(self._get_admin_text("add_error"))
    
    async def _handle_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /stats command (admin only)."""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.admin_ids:
            return
        
        try:
            # Get storage stats.
            storage_stats = await self.storage.get_stats()
            
            # Get scheduler stats.
            scheduler_stats = self.scheduler.get_scheduler_stats()
            
            status = "Running" if scheduler_stats['running'] else "Stopped"
            
            text = self._get_admin_text(
                "stats",
                total_users=storage_stats['total_users'],
                active_users=storage_stats['active_users'],
                total_messages_sent=storage_stats['total_messages_sent'],
                total_jobs=scheduler_stats['total_jobs'],
                jobs_created=scheduler_stats['jobs_created'],
                status=status
            )
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in stats handler: {e}")
            await update.message.reply_text("Error getting statistics.")
    
    async def _handle_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /broadcast command (admin only)."""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.admin_ids:
            return
        
        try:
            if not context.args:
                await update.message.reply_text(self._get_admin_text("broadcast_usage"))
                return
            
            broadcast_text = " ".join(context.args)
            if not broadcast_text:
                await update.message.reply_text(self._get_admin_text("broadcast_empty"))
                return
            
            # Get all active users.
            active_users = await self.storage.get_all_active_users()
            
            sent_count = 0
            failed_count = 0
            
            await update.message.reply_text(self._get_admin_text("broadcast_start", count=len(active_users)))
            
            for user in active_users:
                try:
                    await context.bot.send_message(user.chat_id, broadcast_text, parse_mode='Markdown')
                    sent_count += 1
                except Exception:
                    failed_count += 1
            
            result_text = self._get_admin_text(
                "broadcast_result",
                sent=sent_count,
                failed=failed_count,
                total=len(active_users)
            )
            
            await update.message.reply_text(result_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in broadcast handler: {e}")
            await update.message.reply_text("Error during broadcast.")
    
    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle general messages for registration flow."""
        chat_id = update.effective_chat.id
        message_text = update.message.text
        message_id = update.message.message_id
        
        # Always delete user's message for clean dialog (with small delay for better UX)
        asyncio.create_task(self._delete_user_message_delayed(chat_id, message_id))
        
        # Check if user is in registration flow.
        if chat_id not in self.user_states:
            return
        
        try:
            user_state = self.user_states[chat_id]
            step = user_state["step"]
            language = user_state["language"]
            
            if step == "timezone":
                await self._handle_timezone_input(update, message_text, language)
            elif step == "time":
                await self._handle_time_input(update, message_text, language)
            elif step == "skip_days":
                await self._handle_skip_days_input(update, message_text, language)
            elif step == "change_timezone":
                await self._handle_change_timezone_input(update, message_text, language)
            elif step == "change_time":
                await self._handle_change_time_input(update, message_text, language)
            elif step == "change_skip_days":
                await self._handle_change_skip_days_input(update, message_text, language)
            elif step == "feedback":
                await self._handle_feedback_input(update, message_text, language)
                
        except Exception as e:
            logger.error(f"Error in message handler for user {chat_id}: {e}")
            language = self.user_states.get(chat_id, {}).get("language", "en")
            await update.message.reply_text(self._get_text("error", language))
    
    async def _handle_timezone_input(self, update: Update, timezone_str: str, language: str) -> None:
        """Handle timezone input during registration."""
        chat_id = update.effective_chat.id
        user_state = self.user_states[chat_id]
        message_id = user_state.get("registration_message_id")
        
        if not is_valid_timezone(timezone_str):
            if message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=self._get_text("invalid_timezone", language),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(self._get_text("invalid_timezone", language), parse_mode='Markdown')
            return
        
        # Save timezone and move to next step.
        self.user_states[chat_id]["timezone"] = timezone_str
        self.user_states[chat_id]["step"] = "time"
        
        confirmation = self._get_text("timezone_saved", language)
        time_msg = self._get_text("time_step", language)
        
        combined_msg = f"{confirmation}\n\n{time_msg}"
        
        if message_id:
            await self.application.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=combined_msg,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(combined_msg, parse_mode='Markdown')
    
    async def _handle_time_input(self, update: Update, time_str: str, language: str) -> None:
        """Handle time input during registration."""
        chat_id = update.effective_chat.id
        user_state = self.user_states[chat_id]
        message_id = user_state.get("registration_message_id")
        
        if not is_valid_time_format(time_str):
            if message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=self._get_text("invalid_time", language),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(self._get_text("invalid_time", language))
            return
        
        # Save time and move to next step.
        self.user_states[chat_id]["time"] = time_str
        self.user_states[chat_id]["step"] = "skip_days"
        
        confirmation = self._get_text("time_saved", language)
        skip_days_msg = self._get_text("skip_days_improved", language)
        
        combined_msg = f"{confirmation}\n\n{skip_days_msg}"
        
        if message_id:
            await self.application.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=combined_msg,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(combined_msg, parse_mode='Markdown')
    
    async def _handle_skip_days_input(self, update: Update, skip_days_str: str, language: str) -> None:
        """Handle skip days input during registration."""
        chat_id = update.effective_chat.id
        user_state = self.user_states[chat_id]
        message_id = user_state.get("registration_message_id")
        
        skip_days = []
        
        # Parse skip days - improved validation: any non-number input = no skip days
        if skip_days_str.strip():
            try:
                # Try to parse as comma-separated numbers
                skip_days = [int(x.strip()) for x in skip_days_str.split(',') if x.strip()]
                if not validate_skip_days(skip_days):
                    # Invalid numbers, treat as "no skip days"
                    skip_days = []
            except ValueError:
                # Any non-number input means "no skip days"
                skip_days = []
        
        # Create and save user.
        user = User(
            chat_id=chat_id,
            language=language,
            timezone=user_state["timezone"],
            time_for_send=user_state["time"],
            skip_day_id=skip_days,
            is_active=True
        )
        
        success = await self.storage.save_user(user)
        if success:
            # Schedule user messages.
            await self.scheduler.schedule_user_immediately(chat_id)
            
            # Clean up state.
            del self.user_states[chat_id]
            
            skip_days_display = self._format_skip_days(skip_days, language)
            
            text = self._get_text(
                "setup_complete",
                language,
                time=user.time_for_send,
                timezone=user.timezone,
                skip_days=skip_days_display
            )
            
            # Add menu after setup completion
            text += f"\n\n{self._get_text('menu', language)}"
            keyboard = self._create_main_menu_keyboard(language)
            
            if message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                # Store the final message ID
                await self.storage.add_bot_message(chat_id, message_id, "setup_complete")
            else:
                message = await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
                await self.storage.add_bot_message(chat_id, message.message_id, "setup_complete")
        else:
            error_text = self._get_text("setup_error", language)
            
            if message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=error_text,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(error_text)
            
            del self.user_states[chat_id]
    
    def _format_skip_days(self, skip_days: List[int], language: str) -> str:
        """Format skip days for display."""
        if not skip_days:
            return "–ù–µ—Ç" if language == "ru" else "None"
        
        if language == "ru":
            day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        else:
            day_names = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
        
        return ", ".join([day_names[day] for day in skip_days])
    
    def _create_main_menu_keyboard(self, language: str) -> InlineKeyboardMarkup:
        """Create main menu keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(self._get_text("menu_settings", language), callback_data="menu_settings"),
                InlineKeyboardButton(self._get_text("menu_test", language), callback_data="menu_test")
            ],
            [
                InlineKeyboardButton(self._get_text("menu_about", language), callback_data="menu_about"),
                InlineKeyboardButton(self._get_text("menu_feedback", language), callback_data="menu_feedback")
            ],
            [
                InlineKeyboardButton(self._get_text("menu_stop", language), callback_data="menu_stop")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def _create_settings_menu_keyboard(self, language: str) -> InlineKeyboardMarkup:
        """Create settings menu keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(self._get_text("change_language", language), callback_data="change_language"),
                InlineKeyboardButton(self._get_text("change_time", language), callback_data="change_time")
            ],
            [
                InlineKeyboardButton(self._get_text("change_timezone", language), callback_data="change_timezone"),
                InlineKeyboardButton(self._get_text("change_skip_days", language), callback_data="change_skip_days")
            ],
            [
                InlineKeyboardButton(self._get_text("back_to_menu", language), callback_data="menu_main")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def _handle_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /menu command."""
        chat_id = update.effective_chat.id
        
        try:
            user = await self.storage.get_user(chat_id)
            language = user.language if user else "en"
            
            if not user or not user.is_active:
                await update.message.reply_text(self._get_text("not_subscribed_test", language))
                return
            
            text = self._get_text("menu", language)
            keyboard = self._create_main_menu_keyboard(language)
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in menu handler for user {chat_id}: {e}")
            # Try to get user language for error message
            try:
                user = await self.storage.get_user(chat_id)
                error_lang = user.language if user else "en"
            except:
                error_lang = "en"
            await update.message.reply_text(self._get_text("error", language=error_lang))
    
    async def _handle_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle main menu callback queries."""
        query = update.callback_query
        chat_id = query.message.chat.id
        action = query.data.split("_", 1)[1]  # Extract action after "menu_"
        
        try:
            await query.answer()
            
            user = await self.storage.get_user(chat_id)
            language = user.language if user else "en"
            
            if action == "settings":
                text = self._get_text("settings_menu", language)
                keyboard = self._create_settings_menu_keyboard(language)
                await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
                
            elif action == "test":
                await query.edit_message_text("üß™ Sending test message...")
                success = await self.scheduler.send_test_message(chat_id)
                if success:
                    text = self._get_text("menu", language)
                    keyboard = self._create_main_menu_keyboard(language)
                    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
                else:
                    await query.edit_message_text(self._get_text("test_failed", language))
                    
            elif action == "about":
                text = self._get_text("about_text", language)
                keyboard = [[InlineKeyboardButton(self._get_text("back_to_menu", language), callback_data="menu_main")]]
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
                
            elif action == "feedback":
                # Set user state to expect feedback input
                self.user_states[chat_id] = {"step": "feedback", "language": language}
                
                text = self._get_text("feedback_prompt", language)
                keyboard = [[InlineKeyboardButton(self._get_text("back_to_menu", language), callback_data="menu_main")]]
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
                
            elif action == "stop":
                success = await self.storage.deactivate_user(chat_id)
                if success:
                    await query.edit_message_text(self._get_text("unsubscribed", language), parse_mode='Markdown')
                else:
                    await query.edit_message_text(self._get_text("not_subscribed", language))
                    
            elif action == "main":
                text = self._get_text("menu", language)
                keyboard = self._create_main_menu_keyboard(language)
                await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"Error in menu callback for user {chat_id}: {e}")
            await query.edit_message_text(self._get_text("error", language))
    
    async def _handle_settings_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle settings callback queries (back to settings menu)."""
        query = update.callback_query
        chat_id = query.message.chat.id
        
        try:
            await query.answer()
            
            user = await self.storage.get_user(chat_id)
            language = user.language if user else "en"
            
            text = self._get_text("settings_menu", language)
            keyboard = self._create_settings_menu_keyboard(language)
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in settings callback for user {chat_id}: {e}")
            await query.edit_message_text(self._get_text("error", language))
    
    async def _handle_change_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle change settings callback queries."""
        query = update.callback_query
        chat_id = query.message.chat.id
        setting = query.data.split("_", 1)[1]  # Extract setting after "change_"
        
        try:
            await query.answer()
            
            user = await self.storage.get_user(chat_id)
            language = user.language if user else "en"
            
            if setting == "language":
                keyboard = [
                    [
                        InlineKeyboardButton(TEXTS["en"]["english"], callback_data="lang_en"),
                        InlineKeyboardButton(TEXTS["en"]["russian"], callback_data="lang_ru")
                    ],
                    [
                        InlineKeyboardButton(self._get_text("back_to_menu", language), callback_data="settings_back")
                    ]
                ]
                await query.edit_message_text(
                    self._get_text("choose_language", language), 
                    reply_markup=InlineKeyboardMarkup(keyboard), 
                    parse_mode='Markdown'
                )
                
            elif setting == "time":
                self.user_states[chat_id] = {"step": "change_time", "language": language, "settings_message_id": query.message.message_id}
                keyboard = [[InlineKeyboardButton(self._get_text("back_to_menu", language), callback_data="settings_back")]]
                await query.edit_message_text(
                    self._get_text("time_step", language), 
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                
            elif setting == "timezone":
                self.user_states[chat_id] = {"step": "change_timezone", "language": language, "settings_message_id": query.message.message_id}
                keyboard = [[InlineKeyboardButton(self._get_text("back_to_menu", language), callback_data="settings_back")]]
                await query.edit_message_text(
                    self._get_text("timezone_step", language), 
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                
            elif setting == "skip_days":
                self.user_states[chat_id] = {"step": "change_skip_days", "language": language, "settings_message_id": query.message.message_id}
                keyboard = [[InlineKeyboardButton(self._get_text("back_to_menu", language), callback_data="settings_back")]]
                await query.edit_message_text(
                    self._get_text("skip_days_improved", language), 
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Error in change callback for user {chat_id}: {e}")
            await query.edit_message_text(self._get_text("error", language))
    
    async def _handle_change_timezone_input(self, update: Update, timezone_str: str, language: str) -> None:
        """Handle timezone change input."""
        chat_id = update.effective_chat.id
        user_state = self.user_states[chat_id]
        message_id = user_state.get("settings_message_id")
        
        if not is_valid_timezone(timezone_str):
            if message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=self._get_text("invalid_timezone", language),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(self._get_text("invalid_timezone", language), parse_mode='Markdown')
            return
        
        try:
            user = await self.storage.get_user(chat_id)
            if user:
                user.timezone = timezone_str
                success = await self.storage.save_user(user)
                
                if success:
                    # Reschedule user messages with new timezone
                    await self.scheduler.schedule_user_immediately(chat_id)
                    
                    # Clean up state and show menu
                    del self.user_states[chat_id]
                    
                    text = f"{self._get_text('timezone_saved', language)}\n\n{self._get_text('menu', language)}"
                    keyboard = self._create_main_menu_keyboard(language)
                    
                    if message_id:
                        await self.application.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=text,
                            reply_markup=keyboard,
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
                else:
                    error_text = self._get_text("setup_error", language)
                    if message_id:
                        await self.application.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=error_text,
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text(error_text)
            else:
                error_text = self._get_text("not_subscribed_test", language)
                if message_id:
                    await self.application.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=error_text,
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(error_text)
                
        except Exception as e:
            logger.error(f"Error changing timezone for user {chat_id}: {e}")
            error_text = self._get_text("error", language)
            if message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=error_text,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(error_text)
    
    async def _handle_change_time_input(self, update: Update, time_str: str, language: str) -> None:
        """Handle time change input."""
        chat_id = update.effective_chat.id
        user_state = self.user_states[chat_id]
        message_id = user_state.get("settings_message_id")
        
        if not is_valid_time_format(time_str):
            if message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=self._get_text("invalid_time", language),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(self._get_text("invalid_time", language))
            return
        
        try:
            user = await self.storage.get_user(chat_id)
            if user:
                user.time_for_send = time_str
                success = await self.storage.save_user(user)
                
                if success:
                    # Reschedule user messages with new time
                    await self.scheduler.schedule_user_immediately(chat_id)
                    
                    # Clean up state and show menu
                    del self.user_states[chat_id]
                    
                    text = f"{self._get_text('time_saved', language)}\n\n{self._get_text('menu', language)}"
                    keyboard = self._create_main_menu_keyboard(language)
                    
                    if message_id:
                        await self.application.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=text,
                            reply_markup=keyboard,
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
                else:
                    error_text = self._get_text("setup_error", language)
                    if message_id:
                        await self.application.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=error_text,
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text(error_text)
            else:
                error_text = self._get_text("not_subscribed_test", language)
                if message_id:
                    await self.application.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=error_text,
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(error_text)
                
        except Exception as e:
            logger.error(f"Error changing time for user {chat_id}: {e}")
            error_text = self._get_text("error", language)
            if message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=error_text,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(error_text)
    
    async def _handle_change_skip_days_input(self, update: Update, skip_days_str: str, language: str) -> None:
        """Handle skip days change input."""
        chat_id = update.effective_chat.id
        user_state = self.user_states[chat_id]
        message_id = user_state.get("settings_message_id")
        
        skip_days = []
        
        # Parse skip days - improved validation: any non-number input = no skip days
        if skip_days_str.strip():
            try:
                # Try to parse as comma-separated numbers
                skip_days = [int(x.strip()) for x in skip_days_str.split(',') if x.strip()]
                if not validate_skip_days(skip_days):
                    # Invalid numbers, treat as "no skip days"
                    skip_days = []
            except ValueError:
                # Any non-number input means "no skip days"
                skip_days = []
        
        try:
            user = await self.storage.get_user(chat_id)
            if user:
                user.skip_day_id = skip_days
                success = await self.storage.save_user(user)
                
                if success:
                    # Reschedule user messages with new skip days
                    await self.scheduler.schedule_user_immediately(chat_id)
                    
                    # Clean up state and show menu
                    del self.user_states[chat_id]
                    
                    if skip_days:
                        skip_days_display = self._format_skip_days(skip_days, language)
                        confirmation = f"‚úÖ {skip_days_display}"
                    else:
                        confirmation = self._get_text("no_skip_days", language)
                    
                    text = f"{confirmation}\n\n{self._get_text('menu', language)}"
                    keyboard = self._create_main_menu_keyboard(language)
                    
                    if message_id:
                        await self.application.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=text,
                            reply_markup=keyboard,
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
                else:
                    error_text = self._get_text("setup_error", language)
                    if message_id:
                        await self.application.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=error_text,
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text(error_text)
            else:
                error_text = self._get_text("not_subscribed_test", language)
                if message_id:
                    await self.application.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=error_text,
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(error_text)
                
        except Exception as e:
            logger.error(f"Error changing skip days for user {chat_id}: {e}")
            error_text = self._get_text("error", language)
            if message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=error_text,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(error_text)
    
    async def _delete_message_safe(self, chat_id: int, message_id: int) -> bool:
        """Safely delete a message without raising errors."""
        try:
            await self.application.bot.delete_message(chat_id=chat_id, message_id=message_id)
            return True
        except Exception as e:
            logger.debug(f"Could not delete message {message_id} in chat {chat_id}: {e}")
            return False
    
    async def _delete_user_message_delayed(self, chat_id: int, message_id: int, delay: float = 0.5) -> None:
        """Delete user message with a small delay for better UX."""
        try:
            await asyncio.sleep(delay)
            await self._delete_message_safe(chat_id, message_id)
        except Exception as e:
            logger.debug(f"Error deleting user message {message_id} in chat {chat_id}: {e}")
    
    async def _send_and_store_message(self, chat_id: int, text: str, message_type: str = "general", **kwargs) -> Optional[int]:
        """Send message and store its ID for dialog cleanup."""
        try:
            message = await self.application.bot.send_message(chat_id=chat_id, text=text, **kwargs)
            await self.storage.add_bot_message(chat_id, message.message_id, message_type)
            return message.message_id
        except Exception as e:
            logger.error(f"Error sending message to {chat_id}: {e}")
            return None
    
    async def _reply_and_store_message(self, update: Update, text: str, message_type: str = "general", **kwargs) -> Optional[int]:
        """Reply to message and store its ID for dialog cleanup."""
        try:
            message = await update.message.reply_text(text, **kwargs)
            await self.storage.add_bot_message(update.effective_chat.id, message.message_id, message_type)
            return message.message_id
        except Exception as e:
            logger.error(f"Error replying to message in {update.effective_chat.id}: {e}")
            return None
    
    async def _clear_user_dialog(self, chat_id: int) -> None:
        """Clear user dialog by deleting all stored bot messages."""
        try:
            bot_messages = await self.storage.get_user_bot_messages(chat_id)
            
            deleted_count = 0
            for bot_message in bot_messages:
                success = await self._delete_message_safe(chat_id, bot_message.message_id)
                if success:
                    deleted_count += 1
            
            # Clear stored messages after deletion attempt
            await self.storage.clear_user_bot_messages(chat_id)
            
            logger.info(f"Cleared dialog for user {chat_id}: deleted {deleted_count}/{len(bot_messages)} messages")
            
        except Exception as e:
            logger.error(f"Error clearing dialog for user {chat_id}: {e}")
    
    async def _handle_feedback_input(self, update: Update, feedback_text: str, language: str) -> None:
        """Handle feedback input from user."""
        chat_id = update.effective_chat.id
        
        try:
            # Validate feedback length
            if len(feedback_text) > 1000:
                text = self._get_text("feedback_too_long", language)
                keyboard = self._create_main_menu_keyboard(language)
                await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
                del self.user_states[chat_id]
                return
            
            # Check rate limiting
            can_send = await self.storage.can_send_feedback(chat_id, rate_limit_minutes=10)
            if not can_send:
                text = self._get_text("feedback_rate_limit", language)
                keyboard = self._create_main_menu_keyboard(language)
                await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
                del self.user_states[chat_id]
                return
            
            # Get user info
            user = await self.storage.get_user(chat_id)
            username = update.message.from_user.username or f"user_{chat_id}"
            
            # Create feedback object
            from datetime import datetime
            import uuid
            
            feedback = Feedback(
                id=str(uuid.uuid4())[:8],
                chat_id=chat_id,
                username=username,
                language=language,
                message=feedback_text,
                timestamp=datetime.utcnow().isoformat(),
                message_length=len(feedback_text)
            )
            
            # Save feedback
            success = await self.storage.add_feedback(feedback)
            
            # Clean up state
            del self.user_states[chat_id]
            
            if success:
                text = f"{self._get_text('feedback_sent', language)}\n\n{self._get_text('menu', language)}"
                
                # Notify admins about new feedback
                admin_text = f"üíå **New Feedback Received**\n\n" \
                           f"üë§ User: {chat_id} (@{username})\n" \
                           f"üåê Language: {language}\n" \
                           f"üìè Length: {len(feedback_text)} chars\n" \
                           f"üí¨ Message: {feedback_text}"
                
                for admin_id in self.admin_ids:
                    try:
                        await self.application.bot.send_message(admin_id, admin_text, parse_mode='Markdown')
                    except Exception:
                        pass  # Ignore errors for admin notifications
            else:
                text = f"{self._get_text('feedback_error', language)}\n\n{self._get_text('menu', language)}"
            
            keyboard = self._create_main_menu_keyboard(language)
            message = await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
            # Delete the previous bot message (feedback prompt) for clean dialog
            if update.message.reply_to_message:
                await self._delete_message_safe(chat_id, update.message.reply_to_message.message_id)
                
        except Exception as e:
            logger.error(f"Error handling feedback from user {chat_id}: {e}")
            del self.user_states[chat_id]
            text = f"{self._get_text('error', language)}\n\n{self._get_text('menu', language)}"
            keyboard = self._create_main_menu_keyboard(language)
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
    
    async def _handle_feedback_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /feedback_stats command (admin only)."""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.admin_ids:
            return
        
        try:
            stats = await self.storage.get_feedback_stats()
            
            # Format language statistics
            lang_stats = []
            for lang, count in stats["by_language"].items():
                lang_stats.append(f"  ‚Ä¢ {lang}: {count}")
            
            lang_text = "\n".join(lang_stats) if lang_stats else "  No data"
            
            text = self._get_admin_text(
                "feedback_stats",
                total_feedback=stats["total_feedback"],
                average_length=stats["average_length"],
                file_size_mb=stats["file_size_mb"],
                by_language=lang_text
            )
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in feedback_stats handler: {e}")
            await update.message.reply_text("Error getting feedback statistics.")
    
    async def _handle_feedback_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /feedback_list command (admin only)."""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.admin_ids:
            return
        
        try:
            # Parse limit argument
            limit = 10
            if context.args:
                try:
                    limit = int(context.args[0])
                    limit = max(1, min(limit, 50))  # Clamp between 1 and 50
                except ValueError:
                    await update.message.reply_text(self._get_admin_text("feedback_list_usage"))
                    return
            
            # Get feedback
            feedback_list = await self.storage.get_all_feedback(limit=limit)
            
            if not feedback_list:
                await update.message.reply_text(self._get_admin_text("no_feedback"))
                return
            
            # Format feedback list
            message_parts = [self._get_admin_text("feedback_list_header", count=len(feedback_list))]
            
            for feedback in feedback_list:
                # Truncate long messages
                message_text = feedback.message
                if len(message_text) > 100:
                    message_text = message_text[:97] + "..."
                
                item_text = self._get_admin_text(
                    "feedback_item",
                    id=feedback.id,
                    timestamp=feedback.timestamp[:16],  # YYYY-MM-DD HH:MM
                    chat_id=feedback.chat_id,
                    username=feedback.username,
                    language=feedback.language,
                    length=feedback.message_length,
                    message=message_text
                )
                message_parts.append(item_text)
            
            full_message = "".join(message_parts)
            
            # Split message if too long
            if len(full_message) > 4000:
                for i in range(0, len(full_message), 4000):
                    chunk = full_message[i:i+4000]
                    await update.message.reply_text(chunk, parse_mode='Markdown')
            else:
                await update.message.reply_text(full_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in feedback_list handler: {e}")
            await update.message.reply_text("Error getting feedback list.")
    
    async def _handle_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /admin command (admin only)."""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.admin_ids:
            return
        
        try:
            text = self._get_admin_text("admin_help")
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in admin handler: {e}")
            await update.message.reply_text("Error showing admin help.")